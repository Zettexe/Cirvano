// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/broadcast.proto

package broadcast

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Broadcaster_Broadcast_FullMethodName  = "/broadcast.Broadcaster/Broadcast"
	Broadcaster_PlaySong_FullMethodName   = "/broadcast.Broadcaster/PlaySong"
	Broadcaster_SongVolume_FullMethodName = "/broadcast.Broadcaster/SongVolume"
)

// BroadcasterClient is the client API for Broadcaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcasterClient interface {
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (Broadcaster_BroadcastClient, error)
	PlaySong(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
	SongVolume(ctx context.Context, in *VolumeChangeRequest, opts ...grpc.CallOption) (*VolumeChangeResponse, error)
}

type broadcasterClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcasterClient(cc grpc.ClientConnInterface) BroadcasterClient {
	return &broadcasterClient{cc}
}

func (c *broadcasterClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (Broadcaster_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Broadcaster_ServiceDesc.Streams[0], Broadcaster_Broadcast_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &broadcasterBroadcastClient{stream}
	return x, nil
}

type Broadcaster_BroadcastClient interface {
	Send(*RegisterRequest) error
	Recv() (*Update, error)
	grpc.ClientStream
}

type broadcasterBroadcastClient struct {
	grpc.ClientStream
}

func (x *broadcasterBroadcastClient) Send(m *RegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *broadcasterBroadcastClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *broadcasterClient) PlaySong(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, Broadcaster_PlaySong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcasterClient) SongVolume(ctx context.Context, in *VolumeChangeRequest, opts ...grpc.CallOption) (*VolumeChangeResponse, error) {
	out := new(VolumeChangeResponse)
	err := c.cc.Invoke(ctx, Broadcaster_SongVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcasterServer is the server API for Broadcaster service.
// All implementations must embed UnimplementedBroadcasterServer
// for forward compatibility
type BroadcasterServer interface {
	Broadcast(Broadcaster_BroadcastServer) error
	PlaySong(context.Context, *PlayRequest) (*PlayResponse, error)
	SongVolume(context.Context, *VolumeChangeRequest) (*VolumeChangeResponse, error)
	mustEmbedUnimplementedBroadcasterServer()
}

// UnimplementedBroadcasterServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcasterServer struct {
}

func (UnimplementedBroadcasterServer) Broadcast(Broadcaster_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedBroadcasterServer) PlaySong(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedBroadcasterServer) SongVolume(context.Context, *VolumeChangeRequest) (*VolumeChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SongVolume not implemented")
}
func (UnimplementedBroadcasterServer) mustEmbedUnimplementedBroadcasterServer() {}

// UnsafeBroadcasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcasterServer will
// result in compilation errors.
type UnsafeBroadcasterServer interface {
	mustEmbedUnimplementedBroadcasterServer()
}

func RegisterBroadcasterServer(s grpc.ServiceRegistrar, srv BroadcasterServer) {
	s.RegisterService(&Broadcaster_ServiceDesc, srv)
}

func _Broadcaster_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BroadcasterServer).Broadcast(&broadcasterBroadcastServer{stream})
}

type Broadcaster_BroadcastServer interface {
	Send(*Update) error
	Recv() (*RegisterRequest, error)
	grpc.ServerStream
}

type broadcasterBroadcastServer struct {
	grpc.ServerStream
}

func (x *broadcasterBroadcastServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func (x *broadcasterBroadcastServer) Recv() (*RegisterRequest, error) {
	m := new(RegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broadcaster_PlaySong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcasterServer).PlaySong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcaster_PlaySong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcasterServer).PlaySong(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcaster_SongVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcasterServer).SongVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcaster_SongVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcasterServer).SongVolume(ctx, req.(*VolumeChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Broadcaster_ServiceDesc is the grpc.ServiceDesc for Broadcaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broadcaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broadcast.Broadcaster",
	HandlerType: (*BroadcasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaySong",
			Handler:    _Broadcaster_PlaySong_Handler,
		},
		{
			MethodName: "SongVolume",
			Handler:    _Broadcaster_SongVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _Broadcaster_Broadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/broadcast.proto",
}
